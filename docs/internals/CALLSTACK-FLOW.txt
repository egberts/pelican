From main()/__init__.py

__init__()/__init__.py
  init_path()/__init__.py
  init_plugins()
    load_plugins()/_utils.py
      get_namespace_plugins()/_utils.py
      for each plugins found in ${PLUGINS}
        load_legacy_plugin('just_table')/_utils.py
          importlib.machinery.PathFinder.find_spec()
          importlib.util_module_from_spec()
          spec.loader.exec_module()
          load_legacy_plugin('just_table')/_utils.py
            Python import
          Python import
    for each plugins found in load_plugins() result/__init__.py
      get_plugin_name()/__init__.py
      plugin.register()/<plugin-name>.py
        <plugin-name>.register()/<plugin-name>.py
        signal.initialized.connect(<plugin-name>.configure()>)/<plugin-name>.py (found in htmlsanity)
        signal.readers_init.connect(<plugin-name>.reader()>)/<plugin-name>.py (found in htmlsanity, multimarkdown)
    get_plugin_name()/__init__.py
  signal.initialized.send()/base.py
parse_arguments()
init_logging()
get_instance()/__init__.py
pelican.run()/__init__.py
  time.time()
  __init__.__init__.cls()   # get list of XxxxxxGenerators
  init_plugs()/__init__.py
  clean_output_dir()/utils.py  # if requested
  loop thru <generators>.generate_context()
    ArticlesGenerator.generate_context()/generators.py
      for file in get_files()/generators.py  # Go thru every article files, except for excluded article ones
        get_cache_data()/cache.py  # Check for its cache file if we worked on this before, use cache if so
        Readers.reader.read_file()/readers.py
          preread_signal.send()/base.py/Signal.send
          default_metadata()/readers.py
            process_metadata()/readers.py/process()  # File it into its meta status of 'published', 'draft',  or 'hidden'
          path_metadata()/readers.py/process()
            process_metadata()/readers.py/process()  #
          parse_path_metadata()/readers.py/process()
            process_metadata()/readers.py/process()  #
          get_cache_data()
          <plugin-name>.read/<plugin-name>.py (via reader.read())
            pelican_open()/
            fp.splitlines()
            for each line in the opened (article) file:
              if a pair of keyword/keyvalue by ':' separator
                process_metadata()/readers.py
            subprocess.Popen('<plugin-external-command,if any>')
              subprocess.Popen.execute_child()/subprocess.py
                os.pipe()
                os.fsencode()
                os.path.dirname()
                os.get_exec_path()
                _fork_exec()
            proc.communicate()/   # this is the generated 'output' and 'metadata' variables
            proc.wait()
          __del__()/subprocess.py
          _filter_discardable_metadata()
          cache_data()
            _get_file_stamp()/cache.py
          metadata.update()
          find_empty_alt()/readers.py
          typogrify_wrapper()
            typogrify()
          Signal.send()/base.py (via context_signal.send())
          content_class()
            __init__()/contents.py
        add_failed_source_path()
        cache_data(f, article)
        all_articles.append('published')
        all_drafts.append('draft')
        hidden_articles.append('hidden')
        add_source_path()
        add_static_link()
      # end loop of each article file
      _process('all_articles')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      _process('hidden_articles')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      _process('drafts')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      signals.article_generator_pretaxonomy.send()/base.py
      Go thru every article files, except for excluded article ones
        categories[article,category].append()
        tags[tag].append()
        authors[author].append()
      # end loop of each article file
      dates.sort('NEWEST_FIRST_ARCHIVE')
      _build_period_archive()/generators.py
      categories.sort('REVERSE_CATEGORY_ORDER')
      authors.sort()
      _update_context()/generators.py
      save_cache()/cache.py
      readers.save_cache()/cache.py
      signals.article_generator_finalized.send()
    PagesGenerator.generate_context()/generators.py
      Go thru every page files, except for excluded page ones
        get_cache_data()/cache.py  # Check for its cache file if we worked on this before, use cache if so
        Readers.read_file()/readers.py (via readers.send_file())
          os.path.abspath(os.path.join())
          os.posixize_path()
          preread_signal.send()/base.py/Signal.send
          default_metadata()/readers.py
            process('status')
              process_metadata()/readers.py/process()  # File it into its meta status of 'published', 'draft',  or 'hidden'
            process('category')
            get_date()
          _filter_discardable_metadata()
          path_metadata()/readers.py/
          metadata.update()/
          parse_path_metadata()/readers.py
            process_metadata()/readers.py
          _filter_discardable_metadata()
          metadata.update()
          get_cache_data()
          reader.read()/readers.py
            <plugin-name>.read()/<plugin-name>.py  # MmdReader()
              pelican_open()/
              fp.splitlines()
              for each line in the opened (article) file:
                if a pair of keyword/keyvalue by ':' separator
                  process_metadata()/readers.py
              subprocess.Popen('<plugin-external-command,if any>')
                subprocess.Popen.execute_child()/subprocess.py
                  os.pipe()
                  os.fsencode()
                  os.path.dirname()
                  os.get_exec_path()
                  _fork_exec()
              proc.communicate()/   # this is the generated 'output' and 'metadata' variables
              proc.wait()
            __del__()/subprocess.py
          _filter_discardable_metadata()
          cache_data(path, (content, reader_metadata))
            _get_file_stamp()/cache.py
          metadata.update(reader_metadata)
          find_empty_alt()/readers.py
          typogrify_wrapper()
            typogrify()
          Signal.send()/base.py (via context_signal.send())
          content_class()
            __init__()/contents.py
      # end loop of each article file
      _process('all_pages')/generators.py
      _process('hidden_pages')/generators.py
      _process('draft_pages')/generators.py
      _update_context()/generators.py
      save_cache()/cache.py
      readers.save_cache()/cache.py
      signals.article_generator_finalized.send()
    TemplatesGenerator()
    StaticsGenerator()
  # end loop of p.generate_context()
At this point, content is already HTMLized.
        figure out article ordering by alphabetical order (after translation)
      Go thru every encountered articles (from earlier loop, excluded any)
        Update category
        Update tags
      Update author or authors
      Update date
      Add to period-specific archives
      _update_context()/generator.py
        Make a list of all 'items' ('articles', 'drafts', 'hidden_articles', 'dates', 'tags', 'categories', 'authors', 'related_posts')
      save_cache()/cache.py
      readers.save_cache()/cache.py
      signals.article_generator_finalized.send()/base.py
        Interate thru different receivers
At this point, content file are not written yet
    PageGenerator.generator_context()/generators.py
      generate_context()/generators.py
    TemplateGenerator.generator_context()/generators.py
    StaticGenerator.generator_context()/generators.py
  signals.article_generator_finalized.send()/base.py
    Iterate thru all receiversA
  loop thru <generators>.refresh_metadata_intersite_links()
    ArticlesGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
    PageGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
    TemplateGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
    StaticGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
  loop thru <generators>.generate_output()
    ArticlesGenerator.generate_output()/generators.py
      ArticlesGenerator.generate_feeds()/generators.py
        Writer.write_feed()/writers.py  # for ATOM
        Writer.write_feed()/writers.py  # for RSS
        Writer.write_feed()/writers.py  # for ATOM of all articles
        Writer.write_feed()/writers.py  # for RSS of all articles
        Writer.write_feed()/writers.py  # for ATOM of a specific category
        Writer.write_feed()/writers.py  # for RSS of a specific category
        Writer.write_feed()/writers.py  # for ATOM of an author
        Writer.write_feed()/writers.py  # for RSS of an author
        Writer.write_feed()/writers.py  # for ATOM of a specific tag
        Writer.write_feed()/writers.py  # for RSS of a specific tag
      ArticlesGenerator.generate_pages()/generators.py
        ArticlesGenerator.generate_articles()/generators.py
          signals.article_generator_write_article.send()/base.py
            Content.url()
              Content.get_url_setting()/contents.py
            Writer.writer.write_file()
At this point, content file are NOW written
        ArticlesGenerator.generate_period_archives()/generators.py
        ArticlesGenerator.generate_direct_templates()/generators.py
        ArticlesGenerator.generate_tags()/generators.py
        ArticlesGenerator.generate_categortes()/generators.py
        ArticlesGenerator.generate_authors()/generators.py
        ArticlesGenerator.generate_drafts()/generators.py
      ArticlesGenerator.generate_pages()/generators.py
      signals.article_writer_finalized.send()/base.py
    PageGenerator.generate_output()/generators.py
      signals.page_generator_write_page.send()/generators.py
        Content.save_as()/base.py
        Generator.get_template()/generators.py
        Content.url()/base.py
          Content.get_url_setting()/contents.py
        Writer.writer.write_file()/writers.py  # for save-as
    TemplateGenerator.generate_output()/generators.py
      for each page, check for template file
        Witer.writer.write_file()/writers.py  # for each encountered template file
    StaticGenerator.generate_output()/generators.py
        StaticGenerator._copy_paths()/generators.py
        for static file (theme/logo, copy to its output directory
          StaticGenerator._file_update_required()/generators.py
          if file is not updated then
            StaticGenerator._link_or_copy_staticfile()/generators.py
  signals.finalized.send()/__init__.py
