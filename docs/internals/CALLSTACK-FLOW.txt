From main()/__init__.py

__init__()/__init__.py
  init_path()/__init__.py
  init_plugins()
    load_plugins()/_utils.py
      get_namespace_plugins()/_utils.py
      for each plugins found in ${PLUGINS}
        load_legacy_plugin('just_table')/_utils.py
          importlib.machinery.PathFinder.find_spec()
          importlib.util_module_from_spec()
          spec.loader.exec_module()
          load_legacy_plugin('just_table')/_utils.py
            Python import
          Python import
    for each plugins found in load_plugins() result/__init__.py
      get_plugin_name()/__init__.py
      plugin.register()/<plugin-name>.py
        <plugin-name>.register()/<plugin-name>.py
        signal.initialized.connect(<plugin-name>.configure()>)/<plugin-name>.py (found in htmlsanity)
        signal.readers_init.connect(<plugin-name>.reader()>)/<plugin-name>.py (found in htmlsanity, multimarkdown)
    get_plugin_name()/__init__.py
  signal.initialized.send()/base.py
parse_arguments()
init_logging()
get_instance()/__init__.py
pelican.run()/__init__.py
  time.time()
  __init__.__init__.cls()   # get list of XxxxxxGenerators
  init_plugs()/__init__.py
  clean_output_dir()/utils.py  # if requested
  loop thru <generators>.generate_context()
    ArticlesGenerator.generate_context()/generators.py
      for file in get_files()/generators.py  # Go thru every article files, except for excluded article ones
        get_cache_data()/cache.py  # Check for its cache file if we worked on this before, use cache if so
        Readers.reader.read_file()/readers.py
          preread_signal.send()/base.py/Signal.send
          default_metadata()/readers.py
            process_metadata()/readers.py/process()  # File it into its meta status of 'published', 'draft',  or 'hidden'
          path_metadata()/readers.py/process()
            process_metadata()/readers.py/process()  #
          parse_path_metadata()/readers.py/process()
            process_metadata()/readers.py/process()  #
          get_cache_data()
          <plugin-name>.read/<plugin-name>.py (via reader.read())
            pelican_open()/
            fp.splitlines()
            for each line in the opened (article) file:
              if a pair of keyword/keyvalue by ':' separator
                process_metadata()/readers.py
            subprocess.Popen('<plugin-external-command,if any>')
              subprocess.Popen.execute_child()/subprocess.py
                os.pipe()
                os.fsencode()
                os.path.dirname()
                os.get_exec_path()
                _fork_exec()
            proc.communicate()/   # this is the generated 'output' and 'metadata' variables
            proc.wait()
          __del__()/subprocess.py
          _filter_discardable_metadata()
          cache_data()
            _get_file_stamp()/cache.py
          metadata.update()
          find_empty_alt()/readers.py
          typogrify_wrapper()
            typogrify()
          Signal.send()/base.py (via context_signal.send())
          content_class()
            __init__()/contents.py
        add_failed_source_path()
        cache_data(f, article)
        all_articles.append('published')
        all_drafts.append('draft')
        hidden_articles.append('hidden')
        add_source_path()
        add_static_link()
      # end loop of each article file
      _process('all_articles')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      _process('hidden_articles')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      _process('drafts')/generators.py
        process_translations()/utils.py
          content_list.sort(translation)
          get_original_item()
          order_content()/utils.py
      signals.article_generator_pretaxonomy.send()/base.py
      Go thru every article files, except for excluded article ones
        categories[article,category].append()
        tags[tag].append()
        authors[author].append()
      # end loop of each article file
      dates.sort('NEWEST_FIRST_ARCHIVE')
      _build_period_archive()/generators.py
      categories.sort('REVERSE_CATEGORY_ORDER')
      authors.sort()
      _update_context()/generators.py
      save_cache()/cache.py
      readers.save_cache()/cache.py
      signals.article_generator_finalized.send()
    PagesGenerator.generate_context()/generators.py
      Go thru every page files, except for excluded page ones
        get_cache_data()/cache.py  # Check for its cache file if we worked on this before, use cache if so
        Readers.read_file()/readers.py (via readers.send_file())
          os.path.abspath(os.path.join())
          os.posixize_path()
          preread_signal.send()/base.py/Signal.send
          default_metadata()/readers.py
            process('status')
              process_metadata()/readers.py/process()  # File it into its meta status of 'published', 'draft',  or 'hidden'
            process('category')
            get_date()
          _filter_discardable_metadata()
          path_metadata()/readers.py/
          metadata.update()/
          parse_path_metadata()/readers.py
            process_metadata()/readers.py
          _filter_discardable_metadata()
          metadata.update()
          get_cache_data()
          reader.read()/readers.py
            <plugin-name>.read()/<plugin-name>.py  # MmdReader()
              pelican_open()/
              fp.splitlines()
              for each line in the opened (article) file:
                if a pair of keyword/keyvalue by ':' separator
                  process_metadata()/readers.py
              subprocess.Popen('<plugin-external-command,if any>')
                subprocess.Popen.execute_child()/subprocess.py
                  os.pipe()
                  os.fsencode()
                  os.path.dirname()
                  os.get_exec_path()
                  _fork_exec()
              proc.communicate()/   # this is the generated 'output' and 'metadata' variables
              proc.wait()
            __del__()/subprocess.py
          _filter_discardable_metadata()
          cache_data(path, (content, reader_metadata))
            _get_file_stamp()/cache.py
          metadata.update(reader_metadata)
          find_empty_alt()/readers.py
          typogrify_wrapper()
            typogrify()
          Signal.send()/base.py (via context_signal.send())
          content_class()
            __init__()/contents.py
      # end loop of each article file
      _process('all_pages')/generators.py
      _process('hidden_pages')/generators.py
      _process('draft_pages')/generators.py
      _update_context()/generators.py
      save_cache()/cache.py
      readers.save_cache()/cache.py
      signals.article_generator_finalized.send()
    TemplatesGenerator()
    StaticsGenerator()
  # end loop of p.generate_context()
  # NOTE: At this point, its content variable is already HTMLized.
  signals.all_generators_finalized.send(generators)
  loop thru <generators>.generate_context()
    ArticlesGenerator.refresh_metadata_intersite_links()/generators.py (via refresh_metadata_intersite_links())
      Content.refresh_metadata_intersite_links()/contents.py
    PagesGenerator.refresh_metadata_intersite_links()/generators.py (via refresh_metadata_intersite_links())
      Content.refresh_metadata_intersite_links()/contents.py
    TemplateGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
    StaticGenerator.refresh_metadata_intersite_links()/generators.py
      Content.refresh_metadata_intersite_links()/contents.py
  # end loop of p.generate_context()
  #At this point, content files are not written into its file yet
  loop thru generators
    ArticlesGenerator.generate_output()/generators.py (via generate_output())
      ArticlesGenerator.generate_feeds()/generators.py (via self.generate_feeds())
        Writer.write_feed()/writers.py  # for ATOM
        Writer.write_feed()/writers.py  # for RSS
        Writer.write_feed()/writers.py  # for ATOM of all articles
        Writer.write_feed()/writers.py  # for RSS of all articles
        Writer.write_feed()/writers.py  # for ATOM of a specific category
        Writer.write_feed()/writers.py  # for RSS of a specific category
        Writer.write_feed()/writers.py  # for ATOM of an author
        Writer.write_feed()/writers.py  # for RSS of an author
        Writer.write_feed()/writers.py  # for ATOM of a specific tag
        Writer.write_feed()/writers.py  # for RSS of a specific tag
      ArticlesGenerator.generate_pages()/generators.py (via self.generate_pages())
        ArticlesGenerator.generate_articles()/generators.py (via self.generate_articles())
        Chain up all articles loop
          signals.article_generator_write_article.send()/base.py
          Content.save_as() (via article.save_as)
            get_url_setting()
          Generator.get_template()/generators.py
          Content.url() (via article.url)
            Content.get_url_setting()/contents.py
          Writer.write()/writers.py (via write())  # TBS write or write_file?
        # end of articles chain loop
        ArticlesGenerator.generate_period_archive()/generators.py (via self.generate_period_archives())
        ArticlesGenerator.generate_direct_templates()/generators.py (via self.generate_direct_templates())
          Writer.write_file()/writers.py (via write_file())
        ArticlesGenerator.generate_tags()
        ArticlesGenerator.generate_categories()
        ArticlesGenerator.generate_authors()
        ArticlesGenerator.generate_drafts()
      signals.article_writer_finalized.send(writer)
    PagesGenerator.generate_output()/generators.py (via generate_output())
      signals.page_generator.write_page()
      Chain up all articles loop
        Content.save_as() (via article.save_as)
          get_url_setting()
        Generator.get_template()/generators.py
        Content.url() (via article.url)
          Content.get_url_setting()/contents.py
        Writer.write_file()/writers.py (via write())
      # end of articles chain loop
      signals.page_writer_fianalized.send(writer)
    TemplatePagesGenerator.generate_output()/generators.py (via generate_output())
      for each page, check for template file
        Writers.write_file()/writers.py  (via write())# for each encountered template file
    StaticGenerator.generate_output()/generators.py (via generate_output())
      StaticGenerator._copy_paths()/generators.py
      for sc in self.context["staticfiles"]
        StaticGenerator._file_update_required()/generators.py
        StaticGenerator._link_or_copy_staticfile()/generators.py
    signals.finalized.send(writer)
  # end loop of p.generate_context()
  print statistics
